# Test of the grep2awk zle thing. 

%prep
  if ( zmodload -i zsh/zpty ) >/dev/null 2>&1; then
    . ./comptest
    comptestinit -v -z zsh
  else
    ZTST_unimplemented="the zsh/zpty module is not available"
  fi
  zpty_run 'fpath=( .. $fpath )'
  zpty_run 'autoload -Uz grep2awk'
  zpty_run 'zle -N grep2awk'
  zpty_run 'bindkey "\C-P" grep2awk'
  # The following two are needed for multiline editing hack
  zpty_run 'bindkey "\C-J" accept-line' 
  zpty_run 'bindkey "\C-A" up-history'

  # Setting up the function testing without interference
  # of zle:
  fpath=( .. $fpath )
  autoload -Uz grep2awk

%test

# Start with unit testing the re transform functions.

  grep2awk bre2ere 'a|b\|c'
0:bre2ere: Pipe
>a\|b|c

  grep2awk bre2ere 'a+b\+c'
0:bre2ere: Plus
>a\+b+c

  grep2awk bre2ere 'a(b|c\(d\|(e|f)\)g)'
0:bre2ere: Alternation
>a\(b\|c(d|\(e\|f\))g\)

  grep2awk bre2ere 'a+b[0-9]\+'
0:bre2ere: Some stuff
>a\+b[0-9]+

  grep2awk bre2ere 'a\(b\|c\)d'
0:bre2ere: Subexpressions
>a(b|c)d

  grep2awk bre2ere "1[^]a-z]2"
0:bre2ere: Bracket expression: ERE
>1[^]a-z]2

  grep2awk bre2ere "1[^]a-z]2"
0:Bracket expression: BRE
>1[^]a-z]2

  grep2awk bre2ere '^a^b\(^c^d\|^e^f\)^g^h'
0:bre2ere: Caret special casing
>^a\^b(^c\^d|^e\^f)\^g\^h

  grep2awk bre2ere '^*a^b\(^*c^d\|^e^f\)^g\|*^h*\|i\*'
0:bre2ere: Carets, stars, and alternation.
>^\*a\^b(^\*c\^d|^e\^f)\^g|\*\^h*|i*

  grep2awk bre2ere 'a$b\|c$\|d$\($\|e$\)\|f$'
0:bre2ere:Dollar versus end of string
>a\$b|c$|d\$($|e$)|f$

  grep2awk bre2ere 'a[]+]+[^[:alnum:]]b+[a-z^+[:punct:]]'
0:bre2ere:Bracket expression with character classes
>a[]+]\+[^[:alnum:]]b\+[a-z^+[:punct:]]

  grep2awk fixed2ere 'a*b[c}d?e.f$g^h\i]'
0:fixed2ere
>a\*b\[c\}d\?e\.f\$g\^h\\i\]

# Then the (much slower) testing of zle itself:

  zletest $'grep re f\C-P'
0:Basic function
>BUFFER: awk '/re/ {print $0}' f
>CURSOR: 19

# Test outside of scope of this project.
#
#  zletest $'grep "aa  bbb" f\C-P'
#0:word split re
#>BUFFER: awk '/aa  bbb/ {print $0}' f
#>CURSOR: 24

# Tests of single options:

  zletest $'grep -l re f\C-P'
0:print matching files
>BUFFER: awk '/re/ {print FILENAME; nextfile}' f
>CURSOR: 35

  zletest $'grep -L re f\C-P'
0:print not matching files
>BUFFER: awk 'BEGINFILE{flag=0};ENDFILE{if (flag==0)print FILENAME}; /re/ {flag=1; nextfile}' f
>CURSOR: 82

  zletest $'grep -H re f\C-P'
0:print filename
>BUFFER: awk '/re/ {print FILENAME":"$0}' f
>CURSOR: 30

  zletest $'grep -v re f\C-P'
0:inverse match
>BUFFER: awk '!/re/ {print $0}' f
>CURSOR: 20

  zletest $'grep -w re f\C-P'
0:Word match
>BUFFER: awk '/\<(re)\>/ {print $0}' f
>CURSOR: 25

  zletest $'grep -x re f\C-P'
0:Line match
>BUFFER: awk '/^(re)$/ {print $0}' f
>CURSOR: 23

  zletest $'grep -c re f\C-P'
0:Count matches
>BUFFER: awk 'BEGINFILE{c=0};ENDFILE{if(c>0)print FILENAME":"c}; /re/ {c++}' f
>CURSOR: 65

  zletest $'grep -P re f\C-P'
0:No support for pcre
>BUFFER: grep -P re f
>CURSOR: 12

# Some juggling with retrieving back from history, as
# multiline editing is only working as it should when
# using history... 
  zletest $'grep -F "aaa\nbbb" <<<""\C-J\C-A\C-P'
0:Multiline -F re
>BUFFER: awk '/aaa|bbb/ {print $0}' <<<""
>CURSOR: 24

  zletest $'echo aaa | grep bbb | tail\C-P'
0:Cursor placement in compounded command
>BUFFER: echo aaa | awk '/bbb/ {print $0}' | tail
>CURSOR: 31

  zletest $'grep -l -- -a -b\C-P'
0:End of Options marker
>BUFFER: awk '/-a/ {print FILENAME; nextfile}' -b
>CURSOR: 35

%clean
  zmodload -ui zsh/zpty

